type User {
  _id: ID
  username: String! @unique
  email: String!
  password: String!
  avatar: String
  joinDate: String
  confirmed: Boolean
  favorites: [Post]
}

type Post {
  _id: ID
  title: String
  imageName: String
  categories: [String]
  description: String
  createdDate: String
  likes: Int
  createdBy: User
  messages: [Message]
  imageBase64: String
}

type Message {
  _id: ID
  messageBody: String!
  messageDate: String
  messageUser: User!
}

type Token {
  token: String!
  emailSent: Boolean
}

type SigninToken {
  token: String!
  confirmed: Boolean
}

type PostsPage {
  posts: [Post]
  hasMore: Boolean
}

type File {
  id: ID!
  path: String!
  filename: String!
  mimetype: String!
  encoding: String!
  imageBase64: String!
}

type FileDir {
  fileDir: String!
}
# Likes for Post / Favorites for User
type LikesFaves {
  likes: Int
  favorites: [Post]
}

type Query {
  getCurrentUser: User
  getPosts: [Post]
  getUserPosts(userId: ID!): [Post]
  getPost(postId: ID!): Post!
  searchPosts(searchTerm: String): [Post]
  infiniteScrollPosts(pageNum: Int!, pageSize: Int!): PostsPage
  uploads: [File]
}

type Mutation {
  addPost(
    title: String!
    imageName: String
    categories: [String]!
    description: String!
    creatorId: ID!
    imageBase64: String
  ): Post!
  updateUserPost(
    postId: ID!
    userId: ID!
    title: String!
    imageName: String
    categories: [String]!
    description: String!
  ): Post!
  deleteUserPost(postId: ID!): Post!
  addPostMessage(messageBody: String!, userId: ID!, postId: ID!): Message!
  likePost(postId: ID!, username: String!): LikesFaves!
  unlikePost(postId: ID!, username: String!): LikesFaves!
  signinUser(username: String!, password: String!): SigninToken
  signupUser(username: String!, email: String!, password: String!): Token
  uploadImage(file: Upload!, username: String!): File!
  downloadImage(filename: String!, username: String!): FileDir!
  # multipleUpload(files: [Upload!]!): [File!]!
}

type Subscription {
  postAdded: Post!
}
